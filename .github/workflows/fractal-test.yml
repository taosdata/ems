name: Fractal Test

on:
  workflow_dispatch:
    inputs:
      td-version:
        description: 'Enter the version of TDengine to install'
        required: true
        default: '3.3.5.5'
        type: string
      edge-dnode-count:
        description: 'edge-dnode-count (1~N)'
        required: true
        default: "2"
        type: choice
        options:
          - 1
          - 2
      center-dnode-count:
        description: 'center-dnode-count (1~N)'
        required: true
        default: "3"
        type: choice
        options:
          - 1
          - 2
          - 3
      exec-time:
        description: 'exec-time (unit: s)'
        required: true
        default: '300'
        type: string
      source-interval:
        description: 'source-interval (unit: ms)'
        required: true
        default: '1000'
        type: string
      enable-compression:
        description: 'enable-compression'
        required: true
        default: "false"
        type: choice
        options:
          - true
          - false

permissions:
  actions: read
  contents: read

env :
  MQTT_LABEL : "8C16G"
  EDGE_LABEL : "20C16G"
  CENTER_LABEL : "20C16G"
  CLIENT_LABEL : "24C64G"
  EDGE_DNODE_COUNT : ${{ github.event.inputs.edge-dnode-count }}
  CENTER_DNODE_COUNT : ${{ github.event.inputs.center-dnode-count }}
  HOSTS_DIRNAME: "ip-hostname"
  PROMETHEUS_YML_PATH: /etc/prometheus/prometheus.yml
  PROCESS_EXPORTER_YML_PATH: "/etc/process_exporter.yml"
  MONITORING_PROCESS_NAMES: "taosd,taosadapter,taostest,taosBenchmark"
  ROLE_FILE: "role_info.json"
  WORKFLOW_CONFIG_FILE: "workflow_config.json"

jobs:
  filter-runners:
    name: Select Target Runners
    runs-on: ubuntu-latest
    outputs:
      edge_runner_list: ${{ steps.get-edge-runners.outputs.runners }}
      center_runner_list: ${{ steps.center-edge-runners.outputs.runners }}
      mqtt_runner_list: ${{ steps.get-mqtt-runners.outputs.runners }}
      client_runner_list: ${{ steps.get-client-runners.outputs.runners }}
    steps:
      - name: Get Client Runners
        id: get-client-runners
        uses: taosdata/.github/.github/actions/get-runners@test/fractal
        with:
          include_labels: ${{ env.CLIENT_LABEL }}
          required_count: 1
          gh_token: ${{ secrets.RUNNER_PAT }}

      - name: Get MQTT Runners
        id: get-mqtt-runners
        uses: taosdata/.github/.github/actions/get-runners@test/fractal
        with:
          include_labels: ${{ env.MQTT_LABEL }}
          required_count: ${{ env.EDGE_DNODE_COUNT }}
          gh_token: ${{ secrets.RUNNER_PAT }}

      - name: Get Edge Runners
        id: get-edge-runners
        uses: taosdata/.github/.github/actions/get-runners@test/fractal
        with:
          include_labels: ${{ env.EDGE_LABEL }}
          required_count: ${{ env.EDGE_DNODE_COUNT }}
          exclude_labels: "exclusive"
          gh_token: ${{ secrets.RUNNER_PAT }}

      - name: Get Center Runners
        id: center-edge-runners
        uses: taosdata/.github/.github/actions/get-runners@test/fractal
        with:
          include_labels: "${{ env.CENTER_LABEL }},exclusive"
          required_count: ${{ env.CENTER_DNODE_COUNT }}
          gh_token: ${{ secrets.RUNNER_PAT }}

      - name: Print Key Infos
        run: |
          echo "ðŸ”„ Selected edge_runner_list: ${{ steps.get-edge-runners.outputs.runners }}"
          echo "ðŸ”„ Selected center_runner_list: ${{ steps.center-edge-runners.outputs.runners }}"
          echo "ðŸ”„ Selected mqtt_runner_list: ${{ steps.get-mqtt-runners.outputs.runners }}"
          echo "ðŸ”„ Selected client_runner_list: ${{ steps.get-client-runners.outputs.runners }}"
          echo "ðŸ”„ Github workspace: $GITHUB_WORKSPACE"
          echo "ðŸ”„ Github home: $GITHUB_HOME"
          echo "ðŸ”„ Runner workspace: $RUNNER_WORKSPACE"
          echo "ðŸ”„ Current workspace: $(pwd)"


  upload-client-hosts-info:
    needs: filter-runners
    strategy:
      matrix:
        runner:
          - ${{ fromJson(needs.filter-runners.outputs.client_runner_list || '[]') }}
    runs-on:
      group: customers
      labels: ${{ matrix.runner }}
    steps:
      - name: Run Host Info Collection
        id: collect-host-info
        uses: taosdata/.github/.github/actions/upload-host-info@test/fractal
        with:
          hosts_dirname: ${{ env.HOSTS_DIRNAME }}
          role: "client"

      - name: Upload Host Info
        uses: actions/upload-artifact@v4
        with:
          name:  "${{ env.HOSTS_DIRNAME }}-${{ steps.collect-host-info.outputs.hostname }}"
          path: "${{ env.HOSTS_DIRNAME }}-${{ steps.collect-host-info.outputs.hostname }}.*"

  upload-edge-hosts-info:
    needs: filter-runners
    strategy:
      matrix:
        runner:
          - ${{ fromJson(needs.filter-runners.outputs.edge_runner_list || '[]') }}
    # runs-on: ubuntu-latest
    runs-on:
      group: customers
      labels: ${{ matrix.runner }}
    steps:
      - name: Run Host Info Collection
        id: collect-host-info
        uses: taosdata/.github/.github/actions/upload-host-info@test/fractal
        with:
          hosts_dirname: ${{ env.HOSTS_DIRNAME }}
          role: "edge"

      - name: Upload Host Info
        uses: actions/upload-artifact@v4
        with:
          name:  "${{ env.HOSTS_DIRNAME }}-${{ steps.collect-host-info.outputs.hostname }}"
          path: "${{ env.HOSTS_DIRNAME }}-${{ steps.collect-host-info.outputs.hostname }}.*"

  upload-center-hosts-info:
    needs: filter-runners
    strategy:
      matrix:
        runner:
          - ${{ fromJson(needs.filter-runners.outputs.center_runner_list || '[]') }}
    runs-on:
      group: customers
      labels: ${{ matrix.runner }}
    steps:
      - name: Run Host Info Collection
        id: collect-host-info
        uses: taosdata/.github/.github/actions/upload-host-info@test/fractal
        with:
          hosts_dirname: ${{ env.HOSTS_DIRNAME }}
          role: "center"

      - name: Upload Host Info
        uses: actions/upload-artifact@v4
        with:
          name:  "${{ env.HOSTS_DIRNAME }}-${{ steps.collect-host-info.outputs.hostname }}"
          path: "${{ env.HOSTS_DIRNAME }}-${{ steps.collect-host-info.outputs.hostname }}.*"

  upload-mqtt-hosts-info:
    needs: filter-runners
    strategy:
      matrix:
        runner:
          - ${{ fromJson(needs.filter-runners.outputs.mqtt_runner_list || '[]') }}
    runs-on:
      group: customers
      labels: ${{ matrix.runner }}
    steps:
      - name: Run Host Info Collection
        id: collect-host-info
        uses: taosdata/.github/.github/actions/upload-host-info@test/fractal
        with:
          hosts_dirname: ${{ env.HOSTS_DIRNAME }}
          role: "mqtt"

      - name: Upload Host Info
        uses: actions/upload-artifact@v4
        with:
          name:  "${{ env.HOSTS_DIRNAME }}-${{ steps.collect-host-info.outputs.hostname }}"
          path: "${{ env.HOSTS_DIRNAME }}-${{ steps.collect-host-info.outputs.hostname }}.*"

  combine-and-update-hosts:
    needs:
      - filter-runners
      - upload-mqtt-hosts-info
      - upload-edge-hosts-info
      - upload-center-hosts-info
      - upload-client-hosts-info
    strategy:
      matrix:
        runner:
          - ${{ fromJson(needs.filter-runners.outputs.edge_runner_list || '[]') }}
          - ${{ fromJson(needs.filter-runners.outputs.center_runner_list || '[]') }}
          - ${{ fromJson(needs.filter-runners.outputs.mqtt_runner_list || '[]') }}
          - ${{ fromJson(needs.filter-runners.outputs.client_runner_list || '[]') }}
    runs-on:
      group: customers
      labels: ${{ matrix.runner }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Host Info
        uses: taosdata/.github/.github/actions/download-artifacts@test/fractal
        with:
          gh_token: ${{ secrets.RUNNER_PAT }}
          download_dir: "$RUNNER_WORKSPACE/${{ env.HOSTS_DIRNAME }}"

      - name: Combine IP and Hostname Info In Each Runner
        id: combine-ip-hostname
        uses: taosdata/.github/.github/actions/combine-ip-hostname@test/fractal
        with:
          input-dir: "$RUNNER_WORKSPACE/${{ env.HOSTS_DIRNAME }}"

      - name: Update /etc/hosts In Each Runner
        uses: taosdata/.github/.github/actions/update-etc-hosts@test/fractal
        with:
          entries: ${{ steps.combine-ip-hostname.outputs.combined_info }}

  deploy-center-nodes:
    needs:
     - combine-and-update-hosts
     - filter-runners
    strategy:
      matrix:
        runner:
          - ${{ fromJson(needs.filter-runners.outputs.center_runner_list || '[]') }}
    runs-on:
      group: customers
      labels: ${{ matrix.runner }}
    steps:
      # - name: Install TDengine Enterprise
      #   uses: taosdata/.github/.github/actions/install-tdengine-enterprise@test/fractal
      #   with:
      #     version: ${{ github.event.inputs.td-version }}
      #     download_url: ${{ secrets.NAS_DOWNLOAD_URL }}

      - name: Install Node Exporter In TDengine Nodes
        uses: taosdata/.github/.github/actions/install-node-exporter@test/fractal

      - name: Install Process Exporter In TDengine Nodes
        uses: taosdata/.github/.github/actions/install-process-exporter@test/fractal

      - name: Config Process Exporter YAML In TDengine Nodes
        uses: taosdata/.github/.github/actions/config-process-exporter-yml@test/fractal
        with:
          yml_file_path: "${{ env.PROCESS_EXPORTER_YML_PATH }}"
          process_names: "${{ env.MONITORING_PROCESS_NAMES }}"

  deploy-edge-nodes:
    needs:
      - filter-runners
      - combine-and-update-hosts
    strategy:
      matrix:
        runner:
          - ${{ fromJson(needs.filter-runners.outputs.edge_runner_list || '[]') }}
    runs-on:
      group: customers
      labels: ${{ matrix.runner }}
    steps:
      - name: Install Flashmq
        uses: taosdata/.github/.github/actions/install-flashmq@main

      # - name: Install TDengine Enterprise
      #   uses: taosdata/.github/.github/actions/install-tdengine-enterprise@test/fractal
      #   with:
      #     version: ${{ github.event.inputs.td-version }}
      #     download_url: ${{ secrets.NAS_DOWNLOAD_URL }}

      - name: Install Node Exporter In TDengine Nodes
        uses: taosdata/.github/.github/actions/install-node-exporter@test/fractal

      - name: Install Process Exporter In TDengine Nodes
        uses: taosdata/.github/.github/actions/install-process-exporter@test/fractal

      - name: Config Process Exporter YAML In TDengine Nodes
        uses: taosdata/.github/.github/actions/config-process-exporter-yml@test/fractal
        with:
          yml_file_path: "${{ env.PROCESS_EXPORTER_YML_PATH }}"
          process_names: "${{ env.MONITORING_PROCESS_NAMES }}"

  deploy-mqtt-simulator:
    needs:
      - filter-runners
      - combine-and-update-hosts
    strategy:
      matrix:
        runner:
          - ${{ fromJson(needs.filter-runners.outputs.mqtt_runner_list || '[]') }}
    runs-on:
      group: customers
      labels: ${{ matrix.runner }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install MQTT CLI
        uses: taosdata/.github/.github/actions/install-mqtt-simulator@test/fractal
        with:
          nas_public_url: ${{ secrets.nas_download_url }}

      - name: Find mqtt_pub binary and fractal toml
        run: |
            mqtt_pub_path=$(find $GITHUB_WORKSPACE -name mqtt_pub 2>/dev/null | head -n 1)
            echo "MQTT_PUB_PATH=$mqtt_pub_path" >> $GITHUB_ENV
            rm -f /usr/bin/mqtt_pub && cp $mqtt_pub_path /usr/bin/mqtt_pub
            chmod +x /usr/bin/mqtt_pub
            fractal_toml=$(find $GITHUB_WORKSPACE -name fractal.toml 2>/dev/null | head -n 1)
            echo "FRACTAL_TOML=$fractal_toml" >> $GITHUB_ENV
            rm -f /etc/taos/test.toml && mkdir -p /etc/taos && cp $fractal_toml /etc/taos/test.toml
  # install-tdengine-nodes:
  #   needs:
  #    - combine-and-update-hosts
  #    - filter-runners
  #   strategy:
  #     matrix:
  #       runner:
  #         - ${{ fromJson(needs.filter-runners.outputs.edge_runner_list || '[]') }}
  #         - ${{ fromJson(needs.filter-runners.outputs.center_runner_list || '[]') }}
  #         - ${{ fromJson(needs.filter-runners.outputs.client_runner_list || '[]') }}
  #   runs-on:
  #     group: customers
  #     labels: ${{ matrix.runner }}
  #   steps:
  #     # - name: Install TDengine Enterprise
  #     #   uses: taosdata/.github/.github/actions/install-tdengine-enterprise@test/fractal
  #     #   with:
  #     #     version: ${{ github.event.inputs.td-version }}
  #     #     download_url: ${{ secrets.NAS_DOWNLOAD_URL }}

  #     - name: Install Node Exporter In TDengine Nodes
  #       uses: taosdata/.github/.github/actions/install-node-exporter@test/fractal

  #     - name: Install Process Exporter In TDengine Nodes
  #       uses: taosdata/.github/.github/actions/install-process-exporter@test/fractal

  #     - name: Config Process Exporter YAML In TDengine Nodes
  #       uses: taosdata/.github/.github/actions/config-process-exporter-yml@test/fractal
  #       with:
  #         yml_file_path: "${{ env.PROCESS_EXPORTER_YML_PATH }}"
  #         process_names: "${{ env.MONITORING_PROCESS_NAMES }}"

  deploy-client-nodes:
    needs:
     - combine-and-update-hosts
     - filter-runners
    strategy:
      matrix:
        runner:
          - ${{ fromJson(needs.filter-runners.outputs.client_runner_list || '[]') }}
    runs-on:
      group: customers
      labels: ${{ matrix.runner }}
    steps:
      - name: Sync Repo - taos-test-framework
        uses: taosdata/.github/.github/actions/sync-repo@test/fractal
        with:
          parent-dir: "$RUNNER_WORKSPACE/../"
          repo-url: "https://github.com/taosdata/taos-test-framework.git"
          branch: "feat/TD-33672"
          res_app_id: ${{ vars.TAOSDATA_BOT_ID }}
          res_app_key: ${{ secrets.TAOSDATA_BOT_KEY }}

      - name: Sync Repo - TestNG
        uses: taosdata/.github/.github/actions/sync-repo@test/fractal
        with:
          parent-dir: "$RUNNER_WORKSPACE/../"
          repo-url: "https://github.com/taosdata/TestNG.git"
          branch: "test/TD-33672"
          res_app_id: ${{ vars.TAOSDATA_BOT_ID }}
          res_app_key: ${{ secrets.TAOSDATA_BOT_KEY }}

      - name: Deploy Taostest And TestNG
        id: deploy-taostest-testng
        uses: taosdata/.github/.github/actions/deploy-taostest-testng@test/fractal
        with:
          taostest-dir: "$RUNNER_WORKSPACE/../taos-test-framework"
          testng-dir: "$RUNNER_WORKSPACE/../TestNG"

      # - name: Install TDengine Enterprise
      #   uses: taosdata/.github/.github/actions/install-tdengine-enterprise@test/fractal
      #   with:
      #       version: ${{ github.event.inputs.td-version }}
      #       download_url: ${{ secrets.NAS_DOWNLOAD_URL }}

      - name: Install Grafana In Taostest Node
        uses: taosdata/.github/.github/actions/install-grafana@test/fractal

      - name: Install Prometheus In Taostest Node
        uses: taosdata/.github/.github/actions/install-prometheus@test/fractal

      - name: Install Node Exporter In Taostest Node
        uses: taosdata/.github/.github/actions/install-node-exporter@test/fractal

      - name: Install Process Exporter In Taostest Node
        uses: taosdata/.github/.github/actions/install-process-exporter@test/fractal

      - name: Config Process Exporter YAML In Taostest Node
        uses: taosdata/.github/.github/actions/config-process-exporter-yml@test/fractal
        with:
          yml_file_path: "${{ env.PROCESS_EXPORTER_YML_PATH }}"
          process_names: "${{ env.MONITORING_PROCESS_NAMES }}"

      - name: Gen Taostest Hosts
        uses: taosdata/.github/.github/actions/gen-taostest-env@test/fractal
        with:
          json_file: "$RUNNER_WORKSPACE/${{ env.HOSTS_DIRNAME }}/${{ env.ROLE_FILE }}"
          test_root: "$TEST_ROOT"

      - name: Configure SSH-Keyless Login
        uses: taosdata/.github/.github/actions/ssh-keyless-login@test/fractal
        with:
          target_hosts: $HOSTNAME_INFO
          password: ${{ secrets.VM_PASSWD }}

      - name: Config Prometheus YAML
        uses: taosdata/.github/.github/actions/config-prometheus-yml@test/fractal
        with:
          yml_file_path: ${{ env.PROMETHEUS_YML_PATH }}
          node_exporter_hosts: $HOSTNAME_INFO
          process_exporter_hosts: $HOSTNAME_INFO

      - name: Print Hosts
        run: |
          echo "TEST_ROOT: $TEST_ROOT"
          echo "MQTT Hosts: $MQTT_HOSTS"
          echo "Single Dnode Hosts: $SINGLE_DNODE_HOSTS"
          echo "Taos Benchmark Hosts: $TAOS_BENCHMARK_HOSTS"
          echo "Cluster Hosts: $CLUSTER_HOSTS"
          echo "hostname_info: $HOSTNAME_INFO"

      - name: Create combined JSON file From Inputs
        run: |
          # Get Inputs
          EXEC_TIME="${{ github.event.inputs.exec-time }}"
          SOURCE_INTERVAL="${{ github.event.inputs.source-interval }}"
          ENABLE_COMPRESSION="${{ github.event.inputs.enable-compression }}"
          MQTT_HOSTS=$MQTT_HOSTS
          EDGE_DNODE_HOSTS=$SINGLE_DNODE_HOSTS
          TAOS_BENCHMARK_HOSTS=$TAOS_BENCHMARK_HOSTS
          CENTER_DNODE_HOSTS=$CLUSTER_HOSTS

          # Combine Inputs into a single JSON object
          COMBINED_JSON=$(jq -n \
            --arg execTime "$EXEC_TIME" \
            --arg sourceInterval "$SOURCE_INTERVAL" \
            --arg enableCompression "$ENABLE_COMPRESSION" \
            --argjson mqttHosts "$MQTT_HOSTS" \
            --argjson edgeDnodeHosts "$EDGE_DNODE_HOSTS" \
            --argjson taosBenchmarkHosts "$TAOS_BENCHMARK_HOSTS" \
            --argjson centerDnodeHosts "$CENTER_DNODE_HOSTS" \
            '{
              exec_time: $execTime,
              source_interval: $sourceInterval,
              enable_compression: $enableCompression,
              mqtt_hosts: $mqttHosts,
              edge_dnode_hosts: $edgeDnodeHosts,
              taos_benchmark_hosts: $taosBenchmarkHosts,
              center_dnode_hosts: $centerDnodeHosts
            }')
          echo "COMBINED_JSON: $COMBINED_JSON"
          # COMBINED_JSON=$(jq -n --argjson dbConfig "$FORMATTED_DB_CONFIG" --arg execTime "$EXEC_TIME" '{db_config: $dbConfig, exec_time: $execTime}')
          # COMBINED_JSON=$(jq -n --argjson dbConfig "$FORMATTED_DB_CONFIG" '{db_config: $dbConfig}')

          # Write to File
          workflow_config_file="$TEST_ROOT/env/${{ env.WORKFLOW_CONFIG_FILE }}"
          echo "$COMBINED_JSON" > $workflow_config_file

          # Print File
          cat $workflow_config_file

  clean-env:
    runs-on: ubuntu-latest
    needs:
      - deploy-mqtt-simulator
      - deploy-edge-nodes
      - deploy-center-nodes
      - deploy-client-nodes
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Delete Artifacts
        uses: taosdata/.github/.github/actions/delete-artifacts@test/fractal
        with:
          gh_token: ${{ secrets.RUNNER_PAT }}

  run-test:
    needs: [filter-runners, clean-env]
    strategy:
      matrix:
        runner: ${{ fromJson(needs.filter-runners.outputs.client_runner_list || '[]') }}
    runs-on:
      group: customers
      labels: ${{ matrix.runner }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Test
        run: |
          echo "ðŸ”„ Running test..."
          echo "ðŸ”„ Test version: ${{ github.event.inputs.td-version }}"
          echo "ðŸ”„ Edge dnode count: ${{ github.event.inputs.edge-dnode-count }}"
          echo "ðŸ”„ Center dnode count: ${{ github.event.inputs.center-dnode-count }}"
          echo "ðŸ”„ Exec time: ${{ github.event.inputs.exec-time }}"
          echo "ðŸ”„ Source interval: ${{ github.event.inputs.source-interval }}"
          echo "ðŸ”„ Enable compression: ${{ github.event.inputs.enable-compression }}"
          echo "ðŸ”„ Test started at $(date)"
          echo "%PWD%: $PWD"
          test_start_time=$(date +"%Y%m%d_%H%M%S")
          echo "test_start_time=$test_start_time" >> $GITHUB_ENV
          echo "test_root: $TEST_ROOT"
          workflow_config_path="$RUNNER_WORKSPACE/../TestNG/env"
          echo "ðŸ”„ WORKFLOW_CONFIG_PATH: $workflow_config_path"
          jq --arg test_start_time "$test_start_time" '. + {test_start_time: $test_start_time}' "$workflow_config_path/${{ env.WORKFLOW_CONFIG_FILE }}" > tmp.json
          mv tmp.json $workflow_config_path/${{ env.WORKFLOW_CONFIG_FILE }}
          query_json=$(find $GITHUB_WORKSPACE -name query.json 2>/dev/null | head -n 1)
          db_config_json=$(find $GITHUB_WORKSPACE -name db_config.json 2>/dev/null | head -n 1)
          mv $db_config_json $query_json $workflow_config_path

          echo "FRACTAL_TOML=$fractal_toml"
          echo "FRACTAL_TOML=$fractal_toml" >> $GITHUB_ENV
          taostest --convert-json=fractal-center.json
          taostest --convert-json=fractal-edge-1.json
          taostest --convert-json=fractal-edge-2.json
          taostest --convert-json=fractal-query.json
          taostest --setup=fractal-center.yaml --case=customer_scenarios/fractal/start.py --keep
          taostest --setup=fractal-edge-1.yaml --case=customer_scenarios/fractal/start.py --keep
          taostest --setup=fractal-edge-2.yaml --case=customer_scenarios/fractal/start.py --keep
          taostest --use=fractal-edge-1.yaml --case=customer_scenarios/fractal/fractal_edge.py --keep
          taostest --use=fractal-edge-2.yaml --case=customer_scenarios/fractal/fractal_edge.py --keep
          sleep 60
          taostest --use=fractal-center.yaml --case=customer_scenarios/fractal/fractal_center.py --keep
          taostest --use=fractal-query.yaml --case=customer_scenarios/fractal/fractal_query.py --keep
          sleep ${{ github.event.inputs.exec-time }}
          taostest --use=fractal-edge-1.yaml --case=customer_scenarios/fractal/stop.py --keep
          taostest --use=fractal-edge-2.yaml --case=customer_scenarios/fractal/stop.py --keep
          taostest --use=fractal-center.yaml --case=customer_scenarios/fractal/stop.py --keep
          taostest --use=fractal-query.yaml --case=customer_scenarios/fractal/fractal_summary.py --keep
          echo "ðŸ”„ Test finished at $(date)"
          echo "finish------perf_report_$test_start_time"
          echo "finish------$RUNNER_WORKSPACE/../TestNG/env/perf_report_$test_start_time.txt"
          report_file=$(realpath -m "$RUNNER_WORKSPACE/../TestNG/env/perf_report_$test_start_time.txt"")
          echo "REPORT_FILE=$report_file" >> $GITHUB_ENV

      - name: Upload Host Info
        uses: actions/upload-artifact@v4
        with:
          name:  "perf_report_$test_start_time"
          path: "$REPORT_FILE"