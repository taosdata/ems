name: Fractal Test

on:
  workflow_dispatch:
    inputs:
      td-version:
        description: 'Enter the version of TDengine to install'
        required: true
        default: '3.3.5.1'
        type: string
      edge-dnode-count:
        description: 'edge-dnode-count (1~N)'
        required: true
        default: 1
        type: choice
        options:
          - 1
          - 2
      center-dnode-count:
        description: 'center-dnode-count (1~N)'
        required: true
        default: 1
        type: choice
        options:
          - 1
          - 2
      db-config:
        description: 'config-json to create database'
        required: true
        default: '{"vgroups": 10, "stt_trigger": 2, "buffer": 4096, "minrows": 100}'
        type: string

permissions:
  actions: read
  contents: read

jobs:
  filter-runners:
    runs-on: ubuntu-latest
    outputs:
      runners: ${{ steps.get-runners.outputs.matrix}}
      runner_names: ${{ steps.get-runners.outputs.names}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Available Runners
        env:
          GITHUB_TOKEN: ${{ secrets.RUNNER_PAT }}
        id: get-runners
        run: |
          set -euo pipefail
          echo "Fetching available runners..."
          response_file=$(mktemp)
          gh api /orgs/${{ github.repository_owner }}/actions/runners \
            --paginate \
            --jq '.runners' > "$response_file"

          # set dnode_count
          edge_dnode_count=${{ github.event.inputs.edge-dnode-count }}
          center_dnode_count=${{ github.event.inputs.center-dnode-count }}

          filter_and_format() {
            local count=$1
            local label1=$2
            local label2=$3

            jq -c --argjson count "$count" --arg label1 "$label1" --arg label2 "$label2" '
              map(
                select(
                  .labels |
                  (map(.name) | index($label1)) != null and
                  (map(.name) | index($label2)) != null
                )
                | {
                    name,
                    group: (
                      if .labels | map(.name) | index("fractal") != null then "fractal"
                      else "default"
                      end
                    ),
                    labels: (
                      .labels | map(.name) | join(", ") |
                      split(", ") |
                      map(select(. != "")) |
                      ["self-hosted", "Linux", "X64"] + .
                    )
                  }
              )[:$count]
            ' "$response_file"
          }
          # filter_and_format "$edge_dnode_count" "fractal" "mqtt"
          filtered_mqtt_runners=$(filter_and_format "$edge_dnode_count" "fractal" "mqtt")
          filtered_edge_runners=$(filter_and_format "$edge_dnode_count" "fractal" "edge_td")
          filtered_center_runners=$(filter_and_format "$center_dnode_count" "fractal" "center_td")

          echo "✅ Selected runners with formatted labels:"
          echo "$filtered_mqtt_runners"
          echo "$filtered_edge_runners"
          echo "$filtered_center_runners"

          # All runners
          filtered_runners=$(jq -s '[.[][]]' <(echo "$filtered_mqtt_runners") <(echo "$filtered_edge_runners") <(echo "$filtered_center_runners"))
          echo "✅ Selected runners with formatted labels:"
          echo "$filtered_runners"

          # TDengine runners
          td_runners=$(jq -s '[.[][]]' <(echo "$filtered_edge_runners") <(echo "$filtered_center_runners"))
          echo "✅ Selected td-runners with formatted labels:"
          echo "$td_runners"

          # make sure filtered_runners is a valid JSON array
          if [ -z "$filtered_runners" ]; then
            echo "No runners found. Setting empty matrix."
            echo "matrix=[]" >> $GITHUB_OUTPUT
            echo "names=[]" >> $GITHUB_OUTPUT
          else
            echo "matrix="$filtered_runners"" >> $GITHUB_OUTPUT
            names=$(echo "$filtered_runners" | jq -r '.[].name' | tr '\n' ',')
            names=${names%,}
            echo "names=${names}" >> $GITHUB_OUTPUT

            echo "td_matrix="$td_runners"" >> $GITHUB_OUTPUT
            td_runner_names=$(echo "$td_runners" | jq -r '.[].name' | tr '\n' ',')
            td_runner_names=${td_runner_names%,}
            echo "td_runner_names=${td_runner_names}" >> $GITHUB_OUTPUT
          fi




